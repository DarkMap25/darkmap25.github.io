// Initialisation de la carte centr√©e sur la France
const map = L.map('map', {
  // D√©finition des limites de la carte (la France + Corse)
  maxBounds: [[41, -5], [52, 10]],  // Limites g√©ographiques minimales et maximales pour √©viter de sortir de la France
  minZoom: 5,  // Niveau de zoom minimum
  maxZoom: 15  // Niveau de zoom maximum
}).setView([46.5, 2.5], 6);  // Positionnement initial de la carte au centre de la France avec un zoom de niveau 6

// Fond de carte sombre Stamen Toner
L.tileLayer('https://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png', {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="http://stamen.com">Stamen Design</a>',  // Attribution des sources du fond de carte
  subdomains: 'abcd',  // Sous-domaines pour le rendu du fond de carte
  maxZoom: 19  // Zoom maximal de la carte
}).addTo(map);  // Ajout du fond de carte √† la carte

// Emoji par cat√©gorie
const emojiParCategorie = {
  "Crimes": "‚ò†Ô∏è",  // Emoji pour la cat√©gorie Crimes
  "Histoires Sombres": "‚ö∞Ô∏è",  // Emoji pour la cat√©gorie Histoires Sombres
  "Lieux Myst√©rieux": "üëÅÔ∏è",  // Emoji pour la cat√©gorie Lieux Myst√©rieux
  "Lieux Abandonn√©s": "üè∞"  // Emoji pour la cat√©gorie Lieux Abandonn√©s
};

// Fonction pour cr√©er un marqueur avec emoji
function createEmojiMarker(lieu) {
  // R√©cup√®re l'emoji associ√© √† la cat√©gorie du lieu, ou un emoji par d√©faut si la cat√©gorie est inconnue
  const emoji = emojiParCategorie[lieu.categorie] || "‚ùì";

  // Cr√©ation de l'ic√¥ne du marqueur avec un emoji
  const emojiIcon = L.divIcon({
    className: 'emoji-icon',  // Classe CSS personnalis√©e pour l'ic√¥ne
    html: `<div class="emoji-marker">${emoji}</div>`,  // HTML pour afficher l'emoji dans le marqueur
    iconSize: [30, 30],  // Taille de l'ic√¥ne
    iconAnchor: [15, 15],  // Point d'ancrage de l'ic√¥ne pour qu'elle soit bien centr√©e
    popupAnchor: [0, -15]  // Positionnement du popup par rapport √† l'ic√¥ne
  });

  // Contenu du popup affich√© lors du clic sur le marqueur
  const popupContent = `
    <strong>${lieu.nom}</strong><br>  // Nom du lieu en gras
    ${lieu.resume}<br>  // R√©sum√© court du lieu
    <a href="${lieu.lien}" target="_blank">Voir plus</a>  // Lien pour afficher plus de d√©tails sur le lieu
  `;

  // Retourne le marqueur avec son ic√¥ne emoji et son popup
  return L.marker([lieu.latitude, lieu.longitude], { icon: emojiIcon }).bindPopup(popupContent);
}

// Chargement des lieux depuis lieux.json
fetch('lieux.json')  // Effectue une requ√™te pour r√©cup√©rer les donn√©es du fichier JSON contenant les lieux
  .then(response => response.json())  // Parse la r√©ponse en JSON
  .then(data => {
    // Pour chaque lieu dans le fichier JSON
    data.forEach(lieu => {
      // Cr√©e un marqueur pour chaque lieu et l'ajoute √† la carte
      createEmojiMarker(lieu).addTo(map);
    });
  })
  .catch(error => console.error('Erreur lors du chargement des lieux :', error));  // Gestion d'erreur en cas de probl√®me de chargement

// ‚úÖ Affichage de l'intro anim√©e ou non
let showIntro = true;  // Variable pour d√©terminer si l'intro anim√©e doit √™tre affich√©e ou non

// √âcoute l'√©v√©nement de chargement de la page pour lancer l'animation
window.addEventListener("load", () => {
  const overlay = document.getElementById("intro-overlay");  // S√©lectionne l'√©l√©ment overlay (couche de superposition de l'intro)

  if (showIntro) {  // Si l'animation est activ√©e
    const line1 = document.querySelector(".line1");  // S√©lectionne la premi√®re ligne de texte de l'intro
    const line2 = document.querySelector(".line2");  // S√©lectionne la deuxi√®me ligne de texte de l'intro

    // D√©finit le texte pour l'intro
    line1.textContent = "Un territoire. Une carte.";
    line2.textContent = "Un pass√© sombre.";

    // D√©marre l'animation pour l'intro apr√®s un d√©lai
    setTimeout(() => {
      //overlay.style.transition = "opacity 2s ease";  // Ajoute une transition de fondu pour l'overlay//enlev√©
      overlay.style.opacity = 0;  // R√®gle l'opacit√© √† 0 pour faire dispara√Ætre l'overlay
      setTimeout(() => overlay.remove(), 1000);  // Retire compl√®tement l'overlay apr√®s une seconde
    }, 10000);  // D√©lai de 10 secondes avant de d√©marrer la transition
  } else {
    overlay.style.display = "none";  // Si l'intro n'est pas activ√©e, masque l'overlay
  }
});
