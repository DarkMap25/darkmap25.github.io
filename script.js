// Cr√©ation des deux fonds de carte

// Fond Thunderforest Spinal Map
const thunderforestLayer = L.tileLayer('https://tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png?apikey=2f67b0d994104bf69ffcd0cf70f86a08', {
  attribution: '&copy; OpenStreetMap contributors, &copy; Thunderforest',
  minZoom: 5,  // Niveau de zoom minimum  
  maxZoom: 18
});

// Fond Thunderforest Atlas (remplace CartoDB Dark)
const thunderforestAtlasLayer = L.tileLayer('https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=2f67b0d994104bf69ffcd0cf70f86a08', {
  attribution: '&copy; OpenStreetMap contributors, &copy; Thunderforest',
  minZoom: 5,  // Niveau de zoom minimum
  maxZoom: 18
});

// ‚úÖ Limites de la France m√©tropolitaine + Corse
const franceBounds = L.latLngBounds(
  L.latLng(41, -5),   // Sud-Ouest
  L.latLng(52, 10)    // Nord-Est
);

// Initialisation de la carte avec le fond de carte Thunderforest par d√©faut
const map = L.map('map', {
  center: [46.5, 2.5],  // Coordonn√©es de la France
  zoom: 5,  // Zoom initial
  layers: [thunderforestLayer],  // La couche de carte initiale
  maxBounds: franceBounds, // ‚õî emp√™che de sortir de la France
  maxBoundsViscosity: 1.0  // üå™Ô∏è "r√©sistance" aux bords (1 = totalement bloqu√©)
});

// Ajout du contr√¥le de superposition pour basculer entre les fonds de carte
L.control.layers({
  'Thunderforest Spinal Map': thunderforestLayer,
  'Thunderforest Atlas': thunderforestAtlasLayer
}, {}, {position: 'topleft'}).addTo(map);

// Emoji par cat√©gorie
const emojiParCategorie = {
  "Affaires Non R√©solues": "‚ùì",  // Emoji pour la cat√©gorie Affaires Non R√©solues
  "Crimes": "‚ò†Ô∏è",  // Emoji pour la cat√©gorie Crimes
  "Drames": "‚ö∞Ô∏è",  // Emoji pour la cat√©gorie Drames
  "Guerres et Conflits": "‚öîÔ∏è",  // Emoji pour la cat√©gorie Guerres et Conflits
  "Lieux Abandonn√©s": "üè∞",  // Emoji pour la cat√©gorie Lieux Abandonn√©s
  "Lieux Myst√©rieux": "üëÅÔ∏è"  // Emoji pour la cat√©gorie Lieux Myst√©rieux
};

// Fonction pour cr√©er un marqueur avec emoji
function createEmojiMarker(lieu) {
  // R√©cup√®re l'emoji associ√© √† la cat√©gorie du lieu, ou un emoji par d√©faut si la cat√©gorie est inconnue
  const emoji = emojiParCategorie[lieu.categorie] || "‚ùì";

  // Cr√©ation de l'ic√¥ne du marqueur avec un emoji
  const emojiIcon = L.divIcon({
    className: 'emoji-icon',  // Classe CSS personnalis√©e pour l'ic√¥ne
    html: `<div class="emoji-marker">${emoji}</div>`,  // HTML pour afficher l'emoji dans le marqueur
    iconSize: [30, 30],  // Taille de l'ic√¥ne
    iconAnchor: [15, 15],  // Point d'ancrage de l'ic√¥ne pour qu'elle soit bien centr√©e
    popupAnchor: [0, -15]  // Positionnement du popup par rapport √† l'ic√¥ne
  });

  // Contenu du popup affich√© lors du clic sur le marqueur
  const popupContent = `
    <strong>${lieu.nom}</strong><br>  <!-- Nom du lieu en gras -->
    ${lieu.resume}<br>  <!-- R√©sum√© court du lieu -->
    <a href="${lieu.lien}" target="_blank">Voir plus</a>  <!-- Lien pour afficher plus de d√©tails sur le lieu -->
  `;

    // Retourne le marqueur avec son ic√¥ne emoji et son popup
  const marker = L.marker([lieu.latitude, lieu.longitude], { icon: emojiIcon }).bindPopup(popupContent);

  // Centrer la carte sur le marqueur lors du clic, et s'assurer que le marqueur est au centre
  marker.on('click', () => {
    map.setView([lieu.latitude, lieu.longitude], map.getZoom(), { animate: true });  // Centrer sur le marqueur et garder le zoom
  });
  
    // Ouvre le popup
  marker.openPopup();

  // Ajouter un d√©lai pour ajuster la vue de la carte apr√®s que le popup s'ouvre
  setTimeout(() => {
    const popup = marker.getPopup();
    const popupHeight = popup._container.offsetHeight;
    const mapHeight = map.getSize().y;
    const mapWidth = map.getSize().x;

    // Position du popup
    const markerPosition = marker.getLatLng();
    const popupOffset = popup._container.getBoundingClientRect();

    // V√©rifie si le popup d√©passe du bord sup√©rieur
    const topOverflow = popupOffset.top < 0;
    const bottomOverflow = popupOffset.top + popupHeight > mapHeight;
    const leftOverflow = popupOffset.left < 0;
    const rightOverflow = popupOffset.left + popupOffset.width > mapWidth;

    // Ajuste la carte si n√©cessaire pour rendre le popup visible
    if (topOverflow) {
      map.panBy([0, popupHeight], { animate: true });  // Si trop haut, d√©place la carte vers le bas
    }

    if (bottomOverflow) {
      map.panBy([0, -popupHeight], { animate: true });  // Si trop bas, d√©place la carte vers le haut
    }

    if (leftOverflow) {
      map.panBy([popupOffset.width, 0], { animate: true });  // Si trop √† gauche, d√©place la carte vers la droite
    }

    if (rightOverflow) {
      map.panBy([-popupOffset.width, 0], { animate: true });  // Si trop √† droite, d√©place la carte vers la gauche
    }
  }, 50);  // L√©g√®re temporisation avant d'ajuster

  return marker;
}

// Chargement des lieux depuis lieux.json
fetch('lieux.json')  // Effectue une requ√™te pour r√©cup√©rer les donn√©es du fichier JSON contenant les lieux
  .then(response => response.json())  // Parse la r√©ponse en JSON
  .then(data => {
  const markers = data.map(lieu => createEmojiMarker(lieu)); // Cr√©e tous les marqueurs
  const group = L.featureGroup(markers);                     // Groupe contenant tous les marqueurs
  group.addTo(map);                                          // Ajoute tous les marqueurs √† la carte
  map.fitBounds(group.getBounds());      
  })
  .catch(error => console.error('Erreur lors du chargement des lieux :', error));  // Gestion d'erreur en cas de probl√®me de chargement

// Fonction pour cr√©er une l√©gende avec les cat√©gories et les emojis
function createLegend() {
  const legend = L.control({ position: 'bottomleft' }); // Cr√©e un contr√¥le en bas √† gauche

  // Lors de l'ajout du contr√¥le √† la carte
  legend.onAdd = function (map) {
    const div = L.DomUtil.create('div', 'info legend');  // Cr√©e un conteneur pour la l√©gende
    const categories = [
      { name: 'Affaires Non R√©solues', emoji: '‚ùì' },
      { name: 'Crimes', emoji: '‚ò†Ô∏è' },
      { name: 'Drames', emoji: '‚ö∞Ô∏è' },
      { name: 'Guerres et Conflits', emoji: '‚öîÔ∏è' },
      { name: 'Lieux Abandonn√©s', emoji: 'üè∞' },
      { name: 'Lieux Myst√©rieux', emoji: 'üëÅÔ∏è' }
    ];

    // Parcours les cat√©gories et les ajoute √† la l√©gende
    categories.forEach(category => {
      div.innerHTML += `
        <div class="legend-item">
          <span class="emoji">${category.emoji}</span>
          <span class="category-name">${category.name}</span>
        </div>
      `;
    });

    return div; // Retourne le conteneur avec la l√©gende
  };

  legend.addTo(map); // Ajoute la l√©gende √† la carte
}

// Appeler la fonction pour cr√©er et afficher la l√©gende
createLegend();

// ‚úÖ Affichage de l'intro anim√©e ou non
let showIntro = true;  // Variable pour d√©terminer si l'intro anim√©e doit √™tre affich√©e ou non

// √âcoute l'√©v√©nement de chargement de la page pour lancer l'animation
window.addEventListener("load", () => {
  const overlay = document.getElementById("intro-overlay");  // S√©lectionne l'√©l√©ment overlay (couche de superposition de l'intro)

  if (showIntro) {  // Si l'animation est activ√©e
    const line1 = document.querySelector(".line1");  // S√©lectionne la premi√®re ligne de texte de l'intro
    const line2 = document.querySelector(".line2");  // S√©lectionne la deuxi√®me ligne de texte de l'intro

    // D√©finit le texte pour l'intro
    line1.textContent = "Un territoire. Une carte.";
    line2.textContent = "Un pass√© sombre.";

    // D√©marre l'animation pour l'intro apr√®s un d√©lai
    setTimeout(() => {
      //overlay.style.transition = "opacity 2s ease";  // Ajoute une transition de fondu pour l'overlay//enlev√©
      overlay.style.opacity = 0;  // R√®gle l'opacit√© √† 0 pour faire dispara√Ætre l'overlay
      setTimeout(() => overlay.remove(), 1000);  // Retire compl√®tement l'overlay apr√®s une seconde
    }, 10000);  // D√©lai de 10 secondes avant de d√©marrer la transition
  } else {
    overlay.style.display = "none";  // Si l'intro n'est pas activ√©e, masque l'overlay
  }
});
