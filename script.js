// Cr√©ation du fond de carte Alidade Smooth Dark
const alidadedarkLayer = L.tileLayer(                                          // Initialise le calque de tuiles sombre
  'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png?api_key=a1ef2388-4a98-4134-8ffc-d2496230635e', // URL et clef API
  {
    attribution: '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a>', // Cr√©dits
    minZoom: 5,                                                              // Zoom minimum autoris√©
    maxZoom: 18                                                              // Zoom maximum autoris√©
  }
);

// Cr√©ation du fond de carte Thunderforest Atlas
const thunderforestAtlasLayer = L.tileLayer(                                  // Initialise le calque Thunderforest
  'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=2f67b0d994104bf69ffcd0cf70f86a08', // URL et clef API
  {
    attribution: '&copy; OpenStreetMap contributors, &copy; Thunderforest', // Cr√©dits
    minZoom: 5,                                                             // Zoom minimum autoris√©
    maxZoom: 18                                                             // Zoom maximum autoris√©
  }
);

// D√©finition des limites g√©ographiques (France m√©tropolitaine + Corse)
const franceBounds = L.latLngBounds(                                         // Cr√©e un rectangle englobant
  L.latLng(41, -10),                                                         // Coin sud-ouest
  L.latLng(60, 15)                                                           // Coin nord-est
);

// Initialisation de la carte avec le calque sombre par d√©faut
const map = L.map('map', {                                                   // Lie la carte √† l‚Äô√©l√©ment #map
  center: [46.5, 2.5],                                                        // Position centrale (France)
  zoom: 5,                                                                    // Zoom initial
  layers: [alidadedarkLayer],                                                // Calque de base
  maxBounds: franceBounds,                                                   // Limites de navigation
  maxBoundsViscosity: 1.0                                                     // Emp√™che de sortir des limites
});

// Ajout du bouton de localisation
L.control.locate({                                                            // Configuration du plugin LocateControl
  position: 'topright',                                                       // Position √† droite en haut
  strings: { title: "Localiser ma position" },                               // Texte de l‚Äôinfo-bulle
  drawCircle: true,                                                           // Dessine un cercle d‚Äôerreur
  drawMarker: true,                                                           // Dessine le marqueur
  follow: true,                                                               // Suit l‚Äôutilisateur
  stopFollowingOnDrag: true,                                                  // Stop le suivi si l‚Äôutilisateur d√©place la carte
  setView: true,                                                              // Recentre la carte sur la position
  keepCurrentZoomLevel: true                                                  // Conserve le niveau de zoom
}).addTo(map);                                                                // Ajoute le contr√¥le √† la carte

// Animation pour zoomer doucement lors de la g√©olocalisation
map.on('locationfound', function(event) {                                      // √âv√©nement lorsque la position est trouv√©e
  const targetLatLng = event.latlng;                                          // Coordonn√©es d√©tect√©es
  const targetZoom = 9;                                                        // Zoom cible

  const currentZoom = map.getZoom();                                          // Zoom actuel
  if (currentZoom > targetZoom - 2) {                                         // Si on est d√©j√† pr√®s du zoom cible
    map.setZoom(targetZoom - 2);                                              // Ajuste doucement
  }

  setTimeout(() => {                                                          // D√©lai avant l‚Äôanimation
    map.flyTo(targetLatLng, targetZoom, {                                      // Animation de vol vers la position
      animate: true,
      duration: 2.5,                                                           // Dur√©e de l‚Äôanimation
      easeLinearity: 0.25                                                      // Courbe d‚Äôacc√©l√©ration
    });
  });
});

// Ajout du contr√¥le de changement de fond de carte
L.control.layers(                                                             // S√©lecteur de calques
  { 'Dark': alidadedarkLayer, 'Atlas': thunderforestAtlasLayer },             // Calques disponibles
  {},                                                                          // Calques de superposition (aucun ici)
  { position: 'topleft' }                                                     // Position en haut √† gauche
).addTo(map);

// D√©finition des emojis par cat√©gorie
const emojiParCategorie = {                                                   
  "Affaires Non R√©solues": "‚ùì",
  "Crimes": "‚ò†Ô∏è",
  "Drames": "‚ö∞Ô∏è",
  "Guerres et Conflits": "‚öîÔ∏è",
  "Lieux Abandonn√©s": "üè∞",
  "Lieux Myst√©rieux": "üëÅÔ∏è"
};

// Fonction pour cr√©er un marqueur emoji pour chaque lieu
function createEmojiMarker(lieu) {                                             // Prend un objet lieu en param√®tre
  const emoji = emojiParCategorie[lieu.categorie] || "‚ùì";                      // S√©lectionne l‚Äôemoji ou point d‚Äôinterrogation

  const emojiIcon = L.divIcon({                                                // Cr√©e une ic√¥ne personnalis√©e
    className: 'emoji-icon',                                                   // Classe CSS pour le style
    html: `<div class="emoji-marker">${emoji}</div>`,                          // HTML interne de l‚Äôic√¥ne
    iconSize: [30, 30],                                                         // Taille de l‚Äôic√¥ne
    iconAnchor: [15, 15],                                                       // Point d‚Äôancrage de l‚Äôic√¥ne
    popupAnchor: [0, -15]                                                       // Position du popup par rapport √† l‚Äôic√¥ne
  });

  const popupContent = `                                                       // Contenu HTML du popup
    <strong>${lieu.nom}</strong><br>                                           // Titre en gras
    ${lieu.resume}<br>                                                         // R√©sum√© court
    <a href="#" class="voir-plus" data-id="${lieu.ID}">Voir plus</a>            // Lien ¬´ Voir plus ¬ª avec data-id de lieu.ID
  `;

  const marker = L.marker([lieu.latitude, lieu.longitude], { icon: emojiIcon }) // Cr√©e le marqueur √† la position
    .bindPopup(popupContent, {                                                 // Lie le popup au marqueur
      maxWidth: 600,                                                           // Largeur max du popup
      autoPan: false,                                                          // Emp√™che le recentrage automatique du popup
      keepInView: false                                                        // Emp√™che le maintien dans la vue
    });

  marker.on('click', () => {                                                   // Gestionnaire du clic sur le marqueur
    const latlng = marker.getLatLng();                                         // R√©cup√®re ses coordonn√©es
    map.setView(latlng, map.getZoom(), { animate: true });                     // Recentre la carte dessus
    marker.openPopup();                                                         // Ouvre le popup
  });

  return marker;                                                               // Retourne l‚Äôobjet marker
}

// Chargement du fichier lieux.json et cr√©ation des marqueurs
fetch('lieux.json')                                                            // Appel HTTP pour r√©cup√©rer le JSON
  .then(response => response.json())                                           // Parse la r√©ponse en JSON
  .then(data => {
    window.lieuxData = data;                                                   // Stocke les donn√©es globalement pour y acc√©der ailleurs

    const markers = data.map(lieu => createEmojiMarker(lieu));                // Cr√©e un marqueur par lieu
    window.allMarkers = markers;                                               // Garde la liste pour fonctionnalit√©s futures

    const group = L.featureGroup(markers);                                     // Groupe de marqueurs pour Leaflet
    group.addTo(map);                                                          // Ajoute le groupe √† la carte
    map.fitBounds(group.getBounds());                                          // Ajuste le zoom pour englober tous les marqueurs
  })
  .catch(error => console.error('Erreur lors du chargement des lieux :', error)); // Affiche une erreur si le fetch √©choue

// Cr√©ation de la l√©gende emoji
function createLegend() {                                                      // Fonction qui ajoute la l√©gende
  const legend = L.control({ position: 'bottomleft' });                        // Position en bas √† gauche

  legend.onAdd = function (map) {                                              // M√©thode appel√©e par Leaflet
    const div = L.DomUtil.create('div', 'info legend');                        // Cr√©e le container <div>
    const categories = [                                                       // D√©finition des cat√©gories
      { name: 'Affaires Non R√©solues', emoji: '‚ùì' },
      { name: 'Crimes', emoji: '‚ò†Ô∏è' },
      { name: 'Drames', emoji: '‚ö∞Ô∏è' },
      { name: 'Guerres et Conflits', emoji: '‚öîÔ∏è' },
      { name: 'Lieux Abandonn√©s', emoji: 'üè∞' },
      { name: 'Lieux Myst√©rieux', emoji: 'üëÅÔ∏è' }
    ];

    categories.forEach(category => {                                           // Pour chaque cat√©gorie
      div.innerHTML += `                                                       // Ajoute une ligne √† la l√©gende
        <div class="legend-item">
          <span class="emoji">${category.emoji}</span>
          <span class="category-name">${category.name}</span>
        </div>
      `;
    });

    return div;                                                                // Retourne le bloc √† Leaflet
  };

  legend.addTo(map);                                                           // Ajoute la l√©gende √† la carte
}
createLegend();                                                                // Appelle la fonction pour construire la l√©gende

// === Gestion du clic sur "Voir plus" dans les popups ===
document.addEventListener("click", function (e) {                                        
  if (!e.target.classList.contains("voir-plus")) return;  // 1Ô∏è‚É£ On ne traite que les liens ‚ÄúVoir plus‚Äù
  e.preventDefault();                                       // 2Ô∏è‚É£ Emp√™che le # du href

  const id = e.target.getAttribute("data-id");              // 3Ô∏è‚É£ R√©cup√®re l‚ÄôID
  const lieu = window.lieuxData.find(l => l.ID == id);      // 4Ô∏è‚É£ Cherche le lieu correspondant
  if (!lieu) return;                                        // 5Ô∏è‚É£ S√©curit√©

  // ‚îÄ‚îÄ 6Ô∏è‚É£ On commence par le titre et le r√©sum√© (long si dispo, sinon court)
  let html = `<h2>${lieu.nom}</h2>`;
  html += `<p>${lieu.resume_long || lieu.resume}</p>`;

  // ‚îÄ‚îÄ 7Ô∏è‚É£ Affiche la p√©riode compl√®te si tu as date_debut / date_fin
  if (lieu.date_debut || lieu.date_fin) {
    const debut = lieu.date_debut || "";
    const fin   = lieu.date_fin   || "";
    html += `<p><strong>P√©riode :</strong> ${debut}${debut && fin ? " ‚Äì " : ""}${fin}</p>`;
  }

  // ‚îÄ‚îÄ 8Ô∏è‚É£ Boucle sur toutes les clefs de l‚Äôobjet pour les afficher dynamiquement
  const ignore = [                                     // Clefs qu‚Äôon ne veut pas r√©-afficher
    "ID", "nom", "resume", "resume_long", 
    "latitude", "longitude", "date_debut", "date_fin"
  ];
  // Fonction pour formater proprement la clef (ex: "etat_actuel_du_lieu" ‚Üí "Etat Actuel Du Lieu")
  function formatLabel(key) {
    return key
      .split("_")
      .map(w => w.charAt(0).toUpperCase() + w.slice(1))
      .join(" ");
  }

  for (const [key, value] of Object.entries(lieu)) {    // 9Ô∏è‚É£ Pour chaque paire [clef, valeur]
    if (ignore.includes(key) || !value) continue;       // ‚Ä¢ On saute les clefs ignor√©es ou vides

    // 10Ô∏è‚É£ Si c‚Äôest un lien (string qui commence par "http"), on affiche en <a>
    if (typeof value === "string" && value.match(/^https?:\/\//)) {
      html += `<p><strong>${formatLabel(key)} :</strong> <a href="${value}" target="_blank">${value}</a></p>`;
    } 
    else {
      html += `<p><strong>${formatLabel(key)} :</strong> ${value}</p>`;  // 11Ô∏è‚É£ Texte simple
    }
  }

  // ‚îÄ‚îÄ 12Ô∏è‚É£ Injection et affichage du panneau
  document.getElementById("detailContent").innerHTML = html;
  document.getElementById("detailPanel").classList.add("visible");
});

// Animation d‚Äôintroduction au chargement de la page
let showIntro = true;                                                         // Contr√¥le l‚Äôaffichage de l‚Äôoverlay
window.addEventListener("load", () => {                                       // √Ä la fin du chargement
  const overlay = document.getElementById("intro-overlay");                   // R√©cup√®re l‚Äô√©l√©ment overlay
  if (showIntro) {                                                             // Si on doit montrer l‚Äôintro
    const line1 = document.querySelector(".line1");                           // Ligne 1 de texte
    const line2 = document.querySelector(".line2");                           // Ligne 2 de texte

    line1.textContent = "Un territoire. Une carte.";                          // Texte ligne 1
    line2.textContent = "Un pass√© sombre.";                                   // Texte ligne 2

    setTimeout(() => {                                                        // D√©lai avant disparition
      overlay.style.opacity = 0;                                              // Fade out
      setTimeout(() => overlay.remove(), 1000);                               // Supprime l‚Äôoverlay apr√®s le fade
    }, 10000);                                                                 // Dur√©e d‚Äôaffichage initiale
  } else {
    overlay.style.display = "none";                                           // Ne montre pas si d√©sactiv√©
  }
});

// Ajout du bouton plein √©cran √† la carte
const fullscreenControl = L.control({ position: 'bottomright' });             // Position : bas √† droite
fullscreenControl.onAdd = function (map) {                                     // M√©thode d‚Äôajout de Leaflet
  const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom'); // Cr√©e un <div>
  container.id = 'fullscreenButton';                                           // Attribue un ID
  container.innerHTML = '&#x2194;&#xFE0F;';                                   // Ic√¥ne ‚ÜîÔ∏è
  container.title = 'Passer en plein √©cran';                                  // Tooltip
  container.style.cursor = 'pointer';                                         // Curseur pointeur
  L.DomEvent.disableClickPropagation(container);                               // Emp√™che la carte de capter le clic
  container.addEventListener('click', toggleFullscreen);                       // Lie l‚Äô√©v√©nement toggleFullscreen
  return container;                                                            // Retourne l‚Äô√©l√©ment
};
fullscreenControl.addTo(map);                                                  // Ajoute le contr√¥le √† la carte

// Fonction pour basculer en plein √©cran et sortir
function toggleFullscreen() {                                                  // D√©claration de la fonction
  const mapElement = document.getElementById('map');                           // R√©cup√®re l‚Äô√©l√©ment carte
  if (!document.fullscreenElement) {                                           // Si on n‚Äôest pas en plein √©cran
    mapElement.requestFullscreen?.() ??                                          // Demande le plein √©cran
      mapElement.mozRequestFullScreen?.() ??
      mapElement.webkitRequestFullscreen?.() ??
      mapElement.msRequestFullscreen?.();
  } else {                                                                     // Sinon si on est en plein √©cran
    document.exitFullscreen?.() ??                                             // Quitte le plein √©cran
      document.mozCancelFullScreen?.() ??
      document.webkitExitFullscreen?.() ??
      document.msExitFullscreen?.();
  }
}

// Mise √† jour de l‚Äôic√¥ne et du titre du bouton plein √©cran
['fullscreenchange','mozfullscreenchange','webkitfullscreenchange','msfullscreenchange']
.forEach(evt => document.addEventListener(evt, updateFullscreenButton));       // √âcoute tous les √©v√©nements

function updateFullscreenButton() {                                            // Fonction de mise √† jour
  const btn = document.getElementById('fullscreenButton');                     // R√©cup√®re le bouton
  if (!btn) return;                                                            // Si pas trouv√©, stop
  if (document.fullscreenElement) {                                            // Si en plein √©cran
    btn.title = 'Quitter le plein √©cran';                                      // Change le tooltip
  } else {
    btn.title = 'Passer en plein √©cran';                                       // Restaure le tooltip
  }
}

// Ajout du bouton ¬´ Lieu au hasard üé≤ ¬ª
const randomControl = L.control({ position: 'topright' });                     // Position : haut √† droite
randomControl.onAdd = function () {                                            // M√©thode d‚Äôajout
  const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom'); // Cr√©e un <div>
  container.id = 'randomButton';                                               // ID pour cibler
  container.innerHTML = 'üé≤';                                                   // Emoji d√©
  container.title = 'Lieu au hasard üé≤';                                        // Tooltip
  L.DomEvent.disableClickPropagation(container);                                // Ne perturbe pas la carte
  return container;                                                            // Retourne l‚Äô√©l√©ment
};
randomControl.addTo(map);                                                      // Ajoute le contr√¥le

// √âcoute du clic sur üé≤ pour afficher un lieu al√©atoire
setTimeout(() => {                                                             // D√©lai pour s‚Äôassurer que le bouton existe
  const btn = document.getElementById("randomButton");                         // R√©cup√®re le bouton
  if (!btn) return;                                                            // Si non trouv√©, stop
  btn.addEventListener("click", () => {                                        // Ajoute le gestionnaire de clic
    if (!window.allMarkers?.length) return;                                    // Si aucun marqueur, stop
    const randomIndex = Math.floor(Math.random() * window.allMarkers.length);  // Choix d‚Äôun index al√©atoire
    const randomMarker = window.allMarkers[randomIndex];                       // R√©cup√®re le marqueur
    const latlng = randomMarker.getLatLng();                                   // Coordonn√©es du marqueur
    const currentZoom = map.getZoom();                                         // Zoom actuel

    map.closePopup();                                                          // Ferme tout popup ouvert

    if (currentZoom >= 10) {                                                   // Si zoom √©lev√©
      map.setView(map.getCenter(), 5);                                         // D√©zoom rapide
      setTimeout(() => {                                                       // Apr√®s un court d√©lai
        map.flyTo(latlng, 10, { animate: true, duration: 2.5, easeLinearity: 0.25 }); // Vol vers le lieu
        setTimeout(() => randomMarker.openPopup(), 3000);                     // Ouvre le popup apr√®s l‚Äôanimation
      }, 700);
    } else {                                                                   // Si zoom pas trop important
      map.flyTo(latlng, 10, { animate: true, duration: 2.5, easeLinearity: 0.25 }); // Vol directement
      setTimeout(() => randomMarker.openPopup(), 3000);                       // Ouvre le popup apr√®s l‚Äôanimation
    }
  });
}, 0);
